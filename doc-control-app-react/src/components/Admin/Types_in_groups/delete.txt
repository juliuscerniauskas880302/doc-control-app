  onSelectHandler = e => {
    this.setState({
      [e.target.name]: [].slice.call(e.target.selectedOptions).map(option => {
        return option.value;
      })
    });
  };




   //Show not asinged and available groups to document type
  availableGroups = groupType => {
    if (this.state.selectedType === null) {
      return (
        <option value="" disabled>
          Nėra galimų grupių...
        </option>
      );
    }
    if (this.state.groups.length === 0) {
      return (
        <option value="" disabled>
          Nėra pasirinkimų...
        </option>
      );
    } else {
      let doctypeList = this.state.groups
        .map(type => {
          let shouldShow = true;
          groupType.forEach(t => {
            if (t.title === type.title) {
              shouldShow = false;
            }
          });

          if (shouldShow)
            return (
              <option key={type.title} value={type.id}>
                {type.title}
              </option>
            );
          else {
            return null;
          }
        })
        .filter(t => t !== null);
      if (doctypeList.length === 0) {
        return (
          <option value="" disabled>
            Jau viskas pridėta...
          </option>
        );
      } else return doctypeList;
    }
  };









   onClickAddGroups = (selectedGroups, groupType) => {
    if (selectedGroups.length === 0) {
      return;
    }
    let groupIdList = {
      id: []
    };
    selectedGroups.forEach(el => {
      groupIdList.id.push(el);
    });

    Axios.post(
      "http://localhost:8081/api/doctypes/" +
        this.state.selectedType +
        "/groups/" +
        groupType,
      groupIdList
    )
      .then(res => {
        if (groupType === "review") {
          this.setState({ selectedAddReviewGroups: "" });
          this.loadReviewGroups(this.state.selectedType);
        } else {
          this.setState({ selectedAddSubmissionGroups: "" });
          this.loadSubmmisionGroups(this.state.selectedType);
        }
      })
      .catch(err => console.log(err));
  };














  onClickRemoveGroups = (selectedGroups, groupType) => {
    if (selectedGroups.length === 0) {
      return;
    }
    let groupIdList = {
      id: []
    };
    selectedGroups.forEach(el => {
      groupIdList.id.push(el);
    });
    Axios.delete(
      "http://localhost:8081/api/doctypes/" +
        this.state.selectedType +
        "/groups/" +
        groupType,
      { data: groupIdList }
    )
      .then(res => {
        if (groupType === "review") {
          this.setState({ selectedRemoveReviewGroups: "" });
          this.loadReviewGroups(this.state.selectedType);
        } else {
          this.setState({ selectedRemoveSubmissionGroups: "" });
          this.loadSubmmisionGroups(this.state.selectedType);
        }
      })
      .catch(err => console.log(err));
  };













  onChnageReview = e => {
    const oldArr = this.state.review;
    const index = oldArr.indexOf(e.target.value);
    const newArr = oldArr.slice();
    if (index === -1) {
      newArr.push(e.target.value);
    } else {
      newArr.splice(index, 1);
    }
    this.setState({ review: newArr });
  };

  reviewCheckBox = () => {
    console.log(this.state.review);
    let data = this.state.groups.map(g => {
      return (
        <div className="form-group row" key={g.id}>
          <label className="form-control-label">{g.title}</label>
          <div className="ml-auto">
            <input
              type="checkbox"
              key={g.id}
              name={g.title}
              checked={this.state.review.indexOf(g.id) > -1}
              onChange={this.onChnageReview}
            />
          </div>
        </div>
      );
    });












  onChnageReview = e => {
    const oldArr = this.state.review;
    const index = oldArr.indexOf(e.target.value);
    const newArr = oldArr.slice();
    if (index === -1) {
      newArr.push(e.target.value);
    } else {
      newArr.splice(index, 1);
    }
    this.setState({ review: newArr });
  };

  reviewCheckBox = () => {
    console.log(this.state.review);
    let data = this.state.groups.map(g => {
      return (
        <div className="form-group row" key={g.id}>
          <label className="form-control-label">{g.title}</label>
          <div className="ml-auto">
            <input
              type="checkbox"
              key={g.id}
              name={g.title}
              checked={this.state.review.indexOf(g.id) > -1}
              onChange={this.onChnageReview}
            />
          </div>
        </div>
      );
    });

    return data;
  };







  inGroups = groups => {
    if (groups.length === 0) {
      return (
        <option value="" disabled>
          Nėra galimų grupių...
        </option>
      );
    } else {
      let groupList = groups.map(g => {
        return (
          <option key={g.title} value={g.id}>
            {g.title}
          </option>
        );
      });
      return groupList;
    }
  };